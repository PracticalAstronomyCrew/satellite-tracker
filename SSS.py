# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import numpy as np
from skyfield.api import load, wgs84
from astropy.io import fits
from IPython.display import display
import pandas as pd
from suncalc import get_position, get_times
from datetime import datetime
import datetime
from datetime import timezone
import os


#code to output pandas dataframe
class PandasModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        QtCore.QAbstractTableModel.__init__(self)
        self._data = data

    def rowCount(self, parent=None):
        return self._data.shape[0]

    def columnCount(self, parent=None):
        return self._data.shape[1]

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if index.isValid():
            if role == QtCore.Qt.DisplayRole:
                return str(self._data.iloc[index.row(), index.column()])
        return None

    def headerData(self, section, orientation, role):
        if role == QtCore.Qt.DisplayRole:
            if orientation == QtCore.Qt.Horizontal:
                return self._data.columns[section]
            elif orientation == QtCore.Qt.Vertical:
                return str(section + 1)
        return None




#functions for disturbance calculationws
R_earth = 6371


#SDA calculation in radians
def SDAfunction(t,longitude,lattitude):
    SDA = np.array(get_position(t, longitude, lattitude)['altitude'])
    return SDA

#y axis conversion height (km) to SDA (degrees)
def htoSDA(x):
    return np.degrees(np.arccos(R_earth/(R_earth+x)))
    
def SDAtoh(x):
    return R_earth/np.cos(np.deg2rad(x))-R_earth   


#function to color the days from epoch collumn
def color_negative_red(val):


    if val <= 10:
        color = 'green'
    if 10< val <= 30:
        color = "orange"
    if 30<val:
        color = "red"

    return 'color: %s' % color



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(550, 250)
        MainWindow.setFixedSize(550, 250)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        #icon for the program
        icon = QtGui.QIcon("satellite.png") 
        MainWindow.setWindowIcon(icon)


        #location label
        self.locationlabel = QtWidgets.QLabel(self.centralwidget)
        self.locationlabel.setGeometry(QtCore.QRect(10, 0, 111, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.locationlabel.setFont(font)
        self.locationlabel.setObjectName("locationlabel")

        self.label_comboBox = QtWidgets.QLabel(self.centralwidget)
        self.label_comboBox.setGeometry(QtCore.QRect(10, 40, 80, 16))
        self.label_comboBox.setObjectName("label_comboBox")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(10, 60, 80, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.currentIndexChanged.connect(self.on_combo_box_changed)
        

        self.lonlabel = QtWidgets.QLabel(self.centralwidget)
        self.lonlabel.setGeometry(QtCore.QRect(10, 90, 71, 16))
        self.lonlabel.setObjectName("lonlabel")
        self.lonlabel.setVisible(False)
        self.latlabel = QtWidgets.QLabel(self.centralwidget)
        self.latlabel.setGeometry(QtCore.QRect(10, 140, 55, 16))
        self.latlabel.setObjectName("latlabel")
        self.latlabel.setVisible(False)

        self.Longitude = QtWidgets.QLineEdit(self.centralwidget)
        self.Longitude.setGeometry(QtCore.QRect(10, 110, 113, 22))
        self.Longitude.setObjectName("Longitude")
        self.Longitude.setValidator(QtGui.QRegExpValidator(QtCore.QRegExp('^-?(?:180(?:\.0+)?|[0-9]{1,2}(?:\.\d+)?|1[0-7][0-9](?:\.\d+)?|0)$')))
        self.Longitude.setVisible(False)

        self.Latitude = QtWidgets.QLineEdit(self.centralwidget)
        self.Latitude.setGeometry(QtCore.QRect(10, 160, 113, 22))
        self.Latitude.setObjectName("Latitude")
        self.Latitude.setValidator(QtGui.QRegExpValidator(QtCore.QRegExp('^-?(?:90(?:\.0+)?|[0-8]?[0-9](?:\.\d+)?)$')))
        self.Latitude.setVisible(False)

        #date time section label
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(160, 0, 331, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")

        #run button
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(391, 210, 113, 22))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.run)
        


        self.dateTimestart = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimestart.setGeometry(QtCore.QRect(160, 110, 194, 22))
        self.dateTimestart.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateTimestart.setDisplayFormat("dd/MM/yyyy hh:mm:ss")
        self.dateTimestart.setObjectName("dateTimestart")

        #datetime end label
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(160, 140, 221, 16))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")

        self.dateTimestop = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimestop.setGeometry(QtCore.QRect(160, 160, 194, 22))
        self.dateTimestop.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateTimestop.setDisplayFormat("dd/MM/yyyy hh:mm:ss")
        self.dateTimestop.setObjectName("dateTimestop")

        #RA label
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(391, 40, 151, 16))
        self.label_3.setObjectName("label_3")

        #datetime start label
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(160, 90, 221, 16))
        self.label_4.setObjectName("label_4")

        #frame label
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(391, 0, 101, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")

        self.RA = QtWidgets.QLineEdit(self.centralwidget)
        self.RA.setGeometry(QtCore.QRect(391, 60, 113, 22))
        self.RA.setObjectName("RA")
        self.RA.setValidator(QtGui.QRegExpValidator(QtCore.QRegExp('^(?:\d(?:\.\d+)?|1\d(?:\.\d+)?|2[0-3](?:\.\d+)?|24(?:\.0+)?)$')))

        #declination label
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(391, 90, 141, 16))
        self.label_6.setObjectName("label_6")

        self.DEC = QtWidgets.QLineEdit(self.centralwidget)
        self.DEC.setGeometry(QtCore.QRect(391, 110, 113, 22))
        self.DEC.setObjectName("DEC")
        self.DEC.setValidator(QtGui.QRegExpValidator(QtCore.QRegExp('^-?(?:90(?:\.0+)?|[0-8]?[0-9](?:\.\d+)?)$')))

        #FOV label
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(391, 140, 113, 16))
        self.label_7.setObjectName("label_7")

        self.FOV = QtWidgets.QLineEdit(self.centralwidget)
        self.FOV.setGeometry(QtCore.QRect(391, 160, 113, 22))
        self.FOV.setObjectName("FOV")
        self.FOV.setValidator(QtGui.QRegExpValidator(QtCore.QRegExp('^(?:0*(?:[1-9]\d*|0)\.\d+|[1-9]\d*(?:\.\d+)?)$')))

        #progress bar
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(10, 210, 351, 23))
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setValue(0)
        #for timer
        self.timer = QtCore.QTimer()
        self.progress_value = 0




        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    #function for updating the combo box
    def on_combo_box_changed(self, index):
        if index == 2:
            self.Longitude.setVisible(True)
            self.Latitude.setVisible(True)
            self.lonlabel.setVisible(True)
            self.latlabel.setVisible(True)
        else:
            self.Longitude.setVisible(False)
            self.Latitude.setVisible(False)
            self.lonlabel.setVisible(False)
            self.latlabel.setVisible(False)
            

   

   



  

    def run(self):
        ts = load.timescale()

        #start timer
        self.progress_value = 0
        self.progressBar.setValue(0)
        self.timer.start(100)
        telescope = self.comboBox.currentText()

        #check if all the fields are filled in 
        if self.RA.text() == '' or self.DEC.text() == '' or self.FOV.text() == '' : 
            #create a new window
            popup = QtWidgets.QDialog()
            ui = Ui_Dialog()
            ui.setupUi(popup)
            popup.exec_()

        

        elif telescope == "Other" and self.Latitude.text() == '':
            #create a new window
            popup = QtWidgets.QDialog()
            ui = Ui_Dialog()
            ui.setupUi(popup)
            popup.exec_()

        elif telescope == "Other" and self.Latitude.text() == '':
            #create a new window
            popup = QtWidgets.QDialog()
            ui = Ui_Dialog()
            ui.setupUi(popup)
            popup.exec_()








            

        else:


        

            #time start
            year_start = self.dateTimestart.date().toString("yyyy")
            month_start = self.dateTimestart.date().toString("MM")
            day_start = self.dateTimestart.date().toString("dd")
            hour_start = self.dateTimestart.time().toString("hh")
            minute_start = self.dateTimestart.time().toString("mm")
            t_start = ts.utc(int(year_start), int(month_start), int(day_start), int(hour_start), int(minute_start), 20)


            #time stop
            year_stop = self.dateTimestop.date().toString("yyyy")
            month_stop = self.dateTimestop.date().toString("MM")
            day_stop = self.dateTimestop.date().toString("dd")
            hour_stop = self.dateTimestop.time().toString("hh")
            minute_stop = self.dateTimestop.time().toString("mm")
            t_stop = ts.utc(int(year_stop), int(month_stop), int(day_stop),int(hour_stop), int(minute_stop), 20)

            #determining longitude and latitude
            telescope = self.comboBox.currentText()
            if telescope == "LDST":
                lat = 53.38503497372925 # For LDST
                lon = 6.23474581560975  # For LDST

            if telescope == "Gratama":
                lat = 53.24085625894221
                lon = 6.536285484655465

            if telescope == "Other":
                lat = float(self.Latitude.text())
                lon = float(self.Longitude.text())


            myPos = wgs84.latlon(lat,lon)
            

            
            #determining RA and DEC
            rightascension = float(self.RA.text())
            declination = float(self.DEC.text())

            #determining fov
            fieldofview = float(self.FOV.text())


            #running the code
            satUrl = 'http://celestrak.com/NORAD/elements/active.txt'
            sats = load.tle_file(satUrl)
            print('Loaded', len(sats), 'satellites')
            satNames = {sat.name: sat for sat in sats} #list of all the satellites
            satNames_list = {sat.name for sat in sats} #list of all the names of the satellites to loop over
        
            #information for table
            name = np.array([])
            time = np.array([])
            RAlist = np.array([])
            DEClist = np.array([])
            height = np.array([])
            disturbance = np.array([])
            days_epoch = np.array([])

            #counter for iteration progress bar
            j = 1


            for t in np.arange(t_start.tdb,t_stop.tdb,0.000347222201526165): #integrate over half minute time steps:
                for i in satNames_list: #loop over satellite names
                    sat = satNames[i] 
                    difference = sat - myPos 
                    topocentric = difference.at(ts.tt_jd(t))
                    ra, dec, distance = topocentric.radec()

                    #update the progress bar
                    #keep track of which iteration
                
                    progress = j/(len(satNames_list)*(len(np.arange(t_start.tdb,t_stop.tdb,0.000347222201526165))))
                    self.progressBar.setValue(int(progress * 100))
                    QtWidgets.QApplication.processEvents()


            
                    #check if the satellite is in the frame
                    if rightascension-fieldofview*(1/15)<ra.hours<rightascension+fieldofview*(1/15) and declination-fieldofview<dec.degrees<declination+fieldofview:
                        #append parameters of satellites to list
                        name = np.append(name,i)
                        time = np.append(time,ts.tt_jd(t).utc_strftime())
                        RAlist = np.append(RAlist,ra)
                        DEClist = np.append(DEClist,dec)
                        height = np.append(height,distance.km)
                        days_epoch = np.append(days_epoch, np.abs(ts.tt_jd(t)-sat.epoch))

                        #calculate disturbance
                        dt = datetime.datetime(int(ts.tt_jd(t).utc_strftime()[0:4]),int(ts.tt_jd(t).utc_strftime()[5:7]),int(ts.tt_jd(t).utc_strftime()[8:10]),int(ts.tt_jd(t).utc_strftime()[11:13]),int(ts.tt_jd(t).utc_strftime()[14:16]),int(ts.tt_jd(t).utc_strftime()[17:19]))
                        SDA = SDAfunction(dt,lon,lat)
                        h = SDAtoh(np.degrees(SDA))
                        disturbance_ind = (np.abs(ra.hours-rightascension)/rightascension)*(np.abs(dec.degrees-declination)/declination)*((distance.km)**2)*(h)
                        disturbance = np.append(disturbance,disturbance_ind)

                    j += 1 #update iteration counter
                
                
            table = {"Name": name,
                    "Time(UTC)": time,
                    "RA(hours)": RAlist,
                    "DEC(degrees)" : DEClist,
                    "Distance(km)": height,
                    "Disturbance(STD)": disturbance,
                    "Days from epoch": days_epoch }

        


            #create the data frame
            df = pd.DataFrame(table)
            df.sort_values(by=['Time(UTC)', 'Disturbance(STD)'], inplace=True)

            #change color of days from epoch collumn
            df.style.apply(color_negative_red, axis=None, subset=["Days from epoch"])
            



            #create a new window
            dialog = QtWidgets.QDialog()
            dialog.setWindowTitle("Table View")
            dialog.setLayout(QtWidgets.QVBoxLayout())
            icon = QtGui.QIcon("satellite.png") 
            dialog.setWindowIcon(icon)

            #create the tableview widget
            table_view = QtWidgets.QTableView(MainWindow)
            model = PandasModel(df)
            table_view.setModel(model)

            # Add the table view to the dialog's layout
            dialog.layout().addWidget(table_view)


            #resize the window to fit the table
            table_view.resizeColumnsToContents()
            table_view.resizeRowsToContents()
            dialog.resize(table_view.horizontalHeader().length() + 50, table_view.verticalHeader().length() )
            
            #stop the timer
            self.timer.stop()
            
            #remove the active.txt file
            os.remove("active.txt")

            #execute the new window
            dialog.exec_()

        
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SSS Satellite Scheduling Software"))
        self.locationlabel.setText(_translate("MainWindow", "Location"))
        self.comboBox.setItemText(0, _translate("MainWindow", "LDST"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Gratama"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Other"))
        self.lonlabel.setText(_translate("MainWindow", "Longitude:"))
        self.latlabel.setText(_translate("MainWindow", "Latitude:"))
        self.label.setText(_translate("MainWindow", "Date and time"))
        self.pushButton.setText(_translate("MainWindow", "Run"))
        self.label_2.setText(_translate("MainWindow", "Date and time end observation(UTC): "))
        self.label_3.setText(_translate("MainWindow", "Right ascension(hours):"))
        self.label_4.setText(_translate("MainWindow", "Date and time start observation(UTC):"))
        self.label_5.setText(_translate("MainWindow", "Frame"))
        self.label_6.setText(_translate("MainWindow", "Declination(degrees):"))
        self.label_7.setText(_translate("MainWindow", "FOV(degrees): "))
        self.label_comboBox.setText(_translate("MainWindow", "Telescope: "))

#dialog object for error pop up
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(295, 140)
        icon = QtGui.QIcon("satellite.png") 
        Dialog.setWindowIcon(icon)
        self.label_popup = QtWidgets.QLabel(Dialog)
        self.label_popup.setGeometry(QtCore.QRect(30, 30, 231, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_popup.setFont(font)
        self.label_popup.setObjectName("label")
        self.pushButton_popup = QtWidgets.QPushButton(Dialog)
        self.pushButton_popup.setGeometry(QtCore.QRect(100, 80, 93, 28))
        self.pushButton_popup.setObjectName("pushButton")
        

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.pushButton_popup.clicked.connect(Dialog.reject)



    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "error"))
        self.label_popup.setText(_translate("Dialog", "Please fill in all the fields!"))
        self.pushButton_popup.setText(_translate("Dialog", "Ok"))




if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle('Windows')
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
